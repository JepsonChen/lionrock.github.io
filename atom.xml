<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[黎浔的个人博客]]></title>
  <subtitle><![CDATA[Stay hungry, Stay foolish]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lionrock.github.io/"/>
  <updated>2016-01-04T02:27:39.000Z</updated>
  <id>http://lionrock.github.io/</id>
  
  <author>
    <name><![CDATA[Xun Li]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[把时间浪费在美好的事物上 - 写给程序员的Mac OS X入门指南]]></title>
    <link href="http://lionrock.github.io/2015/12/31/beginning-mac-osx/"/>
    <id>http://lionrock.github.io/2015/12/31/beginning-mac-osx/</id>
    <published>2015-12-31T06:02:50.000Z</published>
    <updated>2016-01-04T02:27:39.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>即将跨入2016年，这也将是我大学里最后一个新年，仔细回想这一年里对我个人来说做出的改变确实不少。断断续续重装了不知道不知道多少次Windows，Linux发行版换来换去总是觉得不那么满意，终于在今年三月份买了人生中第一台Mac。暑假之后开始了人生里第一次真正意义上的实习、第一款App Store上架应用、全面转向了JavaScript全栈开发，感谢<a href="http://weibo.com/u/2164287365" target="_blank" rel="external">@钱久病</a>一直以来对我的支持与鼓励</p>
</blockquote>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_mac-01.jpg" alt="image"></p>
<h2 id="为什么是Mac">为什么是Mac</h2><blockquote>
<p>要是到现在的移动端、服务器端跑的大多数都是*nix系统，熟悉*nix系统显然是很有必要的，Ubuntu对新手来说也是个不错的选择，但是我想Mac或许会是个更好的选择。</p>
</blockquote>
<h3 id="软硬件层面">软硬件层面</h3><ul>
<li>首先Mac OS X的底层是Unix，而且是真正的Unix（符合标准，有授权，合法的可以用Unix商标），强大的命令行</li>
<li>高效快捷（菜单栏置顶，多桌面空间，大量而且全局一致的快捷键）</li>
<li>异常好用的触控板（再也不用担心鼠标手的问题了）</li>
<li>Retina屏幕（代码看着清晰锐利）</li>
<li>超长续航（意味着你可以在咖啡馆编程一整天不用充电）</li>
<li>高性能SSD</li>
<li>不用担心各种驱动问题</li>
<li>杰出的工业设计</li>
</ul>
<h3 id="社区层面">社区层面</h3><ul>
<li>如果你是Swift／Object-C程序员，Mac应该是标配好吧</li>
<li>如果你是Ruby on Rails程序员，包括DHH在内的绝大多数ror开发者首推的开发环境就是Mac</li>
<li>对于Web前端开发者来说，Mac的Retina屏的杀伤力想必不小吧</li>
<li>对于广大Python、PHP程序员来说, Mac可是自带apache、php、python</li>
</ul>
<blockquote>
<p>话说Linus用的也是Mac，虽然他的Mac上装的并不是OS X</p>
</blockquote>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_linus-01.jpg" alt="Linus"></p>
<h2 id="Mac的快速上手指南">Mac的快速上手指南</h2><h3 id="常用快捷键">常用快捷键</h3><blockquote>
<p>需要注意的地方是Mac OS X遵循的是Unix哲学，所以对文件不能用剪切操作,只能移动文件（快捷键一览图片来源于网络）</p>
</blockquote>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_shortcut.jpg" alt="short cut"></p>
<h3 id="开发者常用快捷键">开发者常用快捷键</h3><table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">开发者工具（浏览器）</td>
<td style="text-align:center"><code>Command</code> + <code>Option</code> + <code>I</code></td>
</tr>
<tr>
<td style="text-align:center">将光标移动到行首</td>
<td style="text-align:center"><code>Ctrl</code> + <code>A</code></td>
</tr>
<tr>
<td style="text-align:center">将光标移动到行尾</td>
<td style="text-align:center"><code>Ctrl</code> + <code>E</code></td>
</tr>
<tr>
<td style="text-align:center">清除屏幕</td>
<td style="text-align:center"><code>Ctrl</code> + <code>L</code></td>
</tr>
<tr>
<td style="text-align:center">搜索以前使用命令</td>
<td style="text-align:center"><code>Ctrl</code> + <code>R</code></td>
</tr>
<tr>
<td style="text-align:center">清除当前行</td>
<td style="text-align:center"><code>Ctrl</code> + <code>U</code></td>
</tr>
<tr>
<td style="text-align:center">清除至当前行尾</td>
<td style="text-align:center"><code>Ctrl</code> + <code>K</code></td>
</tr>
<tr>
<td style="text-align:center">单词为单位移动</td>
<td style="text-align:center"><code>Option</code> + <code>方向键</code></td>
</tr>
<tr>
<td style="text-align:center">切换选项卡(向左)</td>
<td style="text-align:center"><code>Command</code> + <code>Shift</code> + <code>[</code></td>
</tr>
<tr>
<td style="text-align:center">切换选项卡(向右)</td>
<td style="text-align:center"><code>Command</code> + <code>Shift</code> + <code>]</code></td>
</tr>
</tbody>
</table>
<h2 id="常用软件清单">常用软件清单</h2><blockquote>
<p>不要装全局Flash，可以考虑用Chrome浏览器（Chrome自带flash播放器）<br>不推荐装360或杀毒类应用，实在是有洁癖的话可以考虑购买Clean My Mac</p>
</blockquote>
<h3 id="命令行工具">命令行工具</h3><ul>
<li>Xcode的Command Line Tools，直接在terminal中输入命令<code>xcode-select --install</code>安装<ul>
<li>git, wget等工具开箱即用</li>
<li>Mac下c语言编译器用的是clang、C++编译器用clang++，调试器用的lldb，以上三个装完Xcode的command line tools后就安装完成，分别用来替代gcc、g++、gdb</li>
</ul>
</li>
<li><p><a href="http://ohmyz.sh/" target="_blank" rel="external">Oh-My-Zsh</a>：使用 <code>zsh：chsh -s /bin/zsh</code>，将默认的shell切换成zsh（zsh是OS X自带的不需要另行安装），接着安装Oh-My-Zsh:</p>
<ul>
<li><p>自动安装：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/raw/master/tools/install.<span class="keyword">sh</span> -O - | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手动安装：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="symbol">git:</span>/<span class="regexp">/github.com/robbyrussell</span><span class="regexp">/oh-my-zsh.git ~/</span>.oh-my-zsh</span><br><span class="line">cp ~<span class="regexp">/.oh-my-zsh/templates</span><span class="regexp">/zshrc.zsh-template ~/</span>.zshrc</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="http://brew.sh" target="_blank" rel="external">Home Brew</a>：Mac下最好用的包管理工具</p>
</li>
<li>brew-cask：用来装GUI程序的包管理工具，直接用brew安装</li>
<li>LaunchRocket： 图形化的Service管理工具，可以直接用brew-cask命令安装 <code>brew tap jimbojsb/launchrocket</code><br><code>brew cask install launchrocket</code></li>
</ul>
<h3 id="其它常用软件">其它常用软件</h3><ul>
<li>解压缩：the Unarchiver（App Store直接安装）</li>
<li>视频播放器：MPlayer X, VLC, <a href="https://mpv.io/" target="_blank" rel="external">mpv</a></li>
<li>MarkDown编辑器：Mou</li>
<li>终端：iTerm2(终端快速分屏的时代来临)</li>
<li>Android手机数据传输：Android File Transfer</li>
</ul>
<h2 id="拓展阅读">拓展阅读</h2><p><a href="http://macshuo.com/?p=728" target="_blank" rel="external">Macintosh演化史</a></p>
<p><a href="http://www.douban.com/group/topic/23658084/" target="_blank" rel="external">Mac OS X背后的故事</a></p>
<p><a href="https://www.quora.com/Why-do-most-professional-programmers-prefer-Macs" target="_blank" rel="external">Why do most professional programmers prefer Macs?</a></p>
<p><a href="http://tiny4.org/blog/2010/02/why-programmers-should-use-mac-os-x/" target="_blank" rel="external">为什么我认为每个程序员都应该用Mac OS X？</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>即将跨入2016年，这也将是我大学里最后一个新年，仔细回想这一年里对我个人来说做出的改变确实不少。断断续续重装了不知道不知道多少次Windows，Linux发行版换来换去总是觉得不那么满意，终于在今年三月份买了人生中第一台Mac。暑假之后开始了人生]]>
    </summary>
    
      <category term="Mac" scheme="http://lionrock.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最显而易见的设计最容易成功——简约也得有个度]]></title>
    <link href="http://lionrock.github.io/2015/11/30/obvious-design/"/>
    <id>http://lionrock.github.io/2015/11/30/obvious-design/</id>
    <published>2015-11-30T05:50:12.000Z</published>
    <updated>2016-01-01T12:07:06.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天看到一篇介绍用户界面设计方面相关的文章，恰好最近在公司开发时一直在考虑UI界面设计方面的问题。于是，本着学习和共享的精神，决定将文章翻译成中文，翻译过程中可能会加上一些自己的理解，觉得哪有问题的以原文为准，不足之处也请见谅。原文链接：<a href="http://www.lukew.com/ff/entry.asp?1945" target="_blank" rel="external">http://www.lukew.com/ff/entry.asp?1945</a></p>
</blockquote>
<p>设计师们总是在尝试通过菜单键来简化移动应用的洁面——尤其是在小屏幕上。但是把一款应用最重要的那一部分操作也移到这些菜单键的后面只会对应用的体验带来消极的影响。</p>
<h1 id="视野之外，想法之外">视野之外，想法之外</h1><p>在努力简化<a href="http://www.polarb.com/features/about" target="_blank" rel="external">Polar</a> ①移动应用的用户界面的过程中，我们将分块式控制菜单(segmented control menu)替换成了折叠式菜单（toggle menu）。尽管这个折叠起来的下拉菜单看起来简洁了不少，但是随之而来的是用户活跃度(Engagement，Engagement is getting your fans to interact and take some action as a result of your posts)的猛跌。最根本的原因是什么？人们不再在那些隐藏在折叠下拉菜单后的应用主要部分间来回切换了。</p>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_outofsight1_2x.png" alt="image"></p>
<p>当ZeeBox的App从横向导航栏(tab row)过渡到抽屉式菜单导航(navigation drawer menu)时，同样的命运也降临在他们身上。一款应用中最重要的部分离开了视线，因此也在我们的印象中渐渐淡去。最后的结果就是，活跃度也剧烈下滑。</p>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_outofsight2_2x.png" alt="image"></p>
<h1 id="视野之内，想法之内">视野之内，想法之内</h1><p>当一款应用最总要的部分做的尽可能容易见到，它们被使用的频率也会相应地增加。Facebook发现当它们把“汉堡”键（“hamburger” menu）移到它们iOS应用的底部时不仅仅是活跃度会上升，其它几个重要指标(metrics)也会跟着一起上升。</p>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_outofsight3_2x.png" alt="image"></p>
<p>同样的，Redbooth将汉堡键换成底部导航栏的做法也收获了会话数和用户数的提升，之前在视线之外的功能现在都被移到了前面的中心位置。</p>
<p><img src="http://7xort8.com1.z0.glb.clouddn.com/blog_outofsight4_2x.png" alt="image"></p>
<h1 id="所重要的功能才值得被移到外面">所重要的功能才值得被移到外面</h1><p>因为手机的屏幕上没有足够多的空间，不是所有的UI(User Interface，用户界面)元素都能被用户所看到。这让移动应用的设计显得很有挑战性。不像在桌面端有足够大的屏幕允许我们充分放置每一个功能特性，而移动端则需要我们做出选择：重要到应该被用户看到的功能应该是什么？</p>
<p>回答这样的问题需要理解什么对你的用户和你的业务而言是最重要的。换句话说，这需要很好的设计。</p>
<p>注：<br>① Polar （<a href="http://www.polarb.com/features/about）是英文原文作者" target="_blank" rel="external">http://www.polarb.com/features/about）是英文原文作者</a> Luke Wroblewski的创业项目，2014年被Google收购，Luke本人现在则是Google的Product Director</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天看到一篇介绍用户界面设计方面相关的文章，恰好最近在公司开发时一直在考虑UI界面设计方面的问题。于是，本着学习和共享的精神，决定将文章翻译成中文，翻译过程中可能会加上一些自己的理解，觉得哪有问题的以原文为准，不足之处也请见谅。原文链接：<a hr]]>
    </summary>
    
      <category term="产品" scheme="http://lionrock.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="设计" scheme="http://lionrock.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈程序员面试那点事]]></title>
    <link href="http://lionrock.github.io/2015/11/27/how-to-interview/"/>
    <id>http://lionrock.github.io/2015/11/27/how-to-interview/</id>
    <published>2015-11-27T15:10:17.000Z</published>
    <updated>2015-11-29T16:47:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>之前看到过一篇介绍HR和程序员在面试程序员时的区别的文章（ <a href="http://coolshell.cn/articles/1695.html" target="_blank" rel="external">别的程序员是怎么读你的简历的</a> ），恰好最近几天我面试了两位来我们公司应聘的程序员，那么我就综合一下我作为刚实习不久的应届毕业生和“面试官”两个身份来谈谈我对程序员面试和如何面试程序员的一些看法</p>
</blockquote>
<h1 id="作为求职者">作为求职者</h1><p>我觉得对于一个没有什么工作经验，学历背景也不是太厉害的应届毕业生来说，一定要有一个拿得出手的个人作品或是参与完成的项目，然后就是围绕这个作品谈一谈产品设计、性能优化、架构等方面的话题，这样有助于通过一个你熟悉的东西把面试中可能涉及到的话题联系起来以便进一步主导整个面试过程的节奏</p>
<h1 id="作为面试官">作为面试官</h1><p>不得不说面试真的是一门学问，而且针对不同的面试者一定要准备好不同的面试问题，这不仅是对面试者的尊重更是对自己公司长远发展的负责。在国内，大部分公司的面试官通常只会问你会什么技术、有哪些项目经验、期望薪水是多少。大公司往往更加看重底层的基础知识和系统架构能力，也还会问一下业务方面的看法啦。</p>
<p><strong>在面试之前有几个问题需要事先想清楚：</strong></p>
<ul>
<li>需要找什么样的人</li>
<li>需要让他完成怎样的工作</li>
<li>如何针对这位求职者设计面试题</li>
</ul>
<h3 id="如何设计面试问题？">如何设计面试问题？</h3><ol>
<li>首先需要问一些基础的技术细节</li>
<li>问一些常见的算法问题（比如很经典的<a href="https://leetcode.com/problems/invert-binary-tree/" target="_blank" rel="external">反转二叉树</a>）</li>
<li>框架的技术实现细节／设计模式／架构设计</li>
<li>综合素质考察<ul>
<li>最喜欢读的书籍/技术书籍</li>
<li>对开源软件的看法</li>
<li>对当下很火的新技术的看法</li>
</ul>
</li>
</ol>
<h3 id="面试也不能一概而论，针对不同类型的求职者自然要设置不同的侧重点：">面试也不能一概而论，针对不同类型的求职者自然要设置不同的侧重点：</h3><ul>
<li>应届毕业学生：<ul>
<li>数据结构、算法</li>
<li>操作系统、计算机网络等专业基础</li>
<li>课余时间做过什么个人项目没</li>
<li>毕业设计做的什么，为什么要做这个</li>
</ul>
</li>
<li>有过几年工作经验：<ul>
<li>工作方式</li>
<li>解决问题的态度</li>
<li>对新技术的了解及看法</li>
<li>架构设计、设计模式</li>
</ul>
</li>
</ul>
<p>—分割线—<br>说实话，我对面试并不是很有经验，只是最近刚好面试了几个人所以把自己的一些总结写下来，不足之处还请见谅</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>之前看到过一篇介绍HR和程序员在面试程序员时的区别的文章（ <a href="http://coolshell.cn/articles/1695.html" target="_blank" rel="external">别的程序员是怎么读你的简历的]]>
    </summary>
    
      <category term="随想" scheme="http://lionrock.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面试" scheme="http://lionrock.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的博客搬家啦]]></title>
    <link href="http://lionrock.github.io/2015/11/26/blog-space-moved/"/>
    <id>http://lionrock.github.io/2015/11/26/blog-space-moved/</id>
    <published>2015-11-26T15:54:34.000Z</published>
    <updated>2015-11-29T16:47:21.000Z</updated>
    <content type="html"><![CDATA[<p>今年国庆节的时候就计划着准备自己重新写一套博客，但是一直拖到今天才开始真正去做，哎～不说了，好歹今天总算是搬进新家了OhYeah(＞人＜;)</p>
<h2 id="谈谈之前的博客系统">谈谈之前的博客系统</h2><p>由于我大二开始主力语言转移到了python，当时就拿博客拿来当练手的项目，前前后后花了三个晚上的时间总算是把博客的系统搭起来了，麻烦虽然是麻烦了点，不过看着自己写的博客呈现在各种设备的屏幕上时成就感还是满满的对吧</p>
<p>当时的技术栈用的是：</p>
<blockquote>
<p>web框架：Flask<br>数据库：MySql<br>前端框架：无<br>文本编辑器：ckeditor</p>
</blockquote>
<p>至于后来为什么不用自己写的博客系统了，主要有下面几个原因：</p>
<ul>
<li>托管在云服务器上，维护起来比较麻烦</li>
<li>动态的博客网站，SEO做的很糟糕 </li>
</ul>
<p>写博客主要是想让所思所想能有一个沉淀的过程，自己写一套简单的博客系统又不够好用，写复杂了又会陷入重复造轮子的无尽循环，其实一开始不过是想安安静静写写文章嘛，至于那么麻烦吗，时间应该浪费在更有价值更美好的事物上才对。在几经考虑之后决定采用「静态网站生成器」加「Github Pages」服务来搭建新版的博客，加上最近在公司实习用的正好是Node.Js，所依最终选定了Hexo这款快速、简单而又强大的博客框架</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今年国庆节的时候就计划着准备自己重新写一套博客，但是一直拖到今天才开始真正去做，哎～不说了，好歹今天总算是搬进新家了OhYeah(＞人＜;)</p>
<h2 id="谈谈之前的博客系统">谈谈之前的博客系统</h2><p>由于我大二开始主力语言转移到了python，当时就拿]]>
    </summary>
    
      <category term="博客" scheme="http://lionrock.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="随想" scheme="http://lionrock.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
